/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.dondish.specatles;

import io.reactivex.Flowable;
import io.reactivex.Observable;
import io.vertx.core.Vertx;
import io.vertx.core.eventbus.EventBus;
import io.vertx.reactivex.core.eventbus.MessageConsumer;

import javax.annotation.Nonnull;
import java.util.concurrent.CompletableFuture;

/**
 * The basic broker interface to communicate with other modules
 */
public interface Broker {

    /**
     * The vertx instance
     * @return The vertx instance
     */
    public Vertx vertx();

    /**
     * The eventbus instance
     * @return The eventbus instance
     */
    public EventBus eventBus();

    /**
     * Handles single or multiple events
     * @param events the event names to handle
     * @return The vertx message consumer to consume events
     */
    public MessageConsumer<byte[]> on(@Nonnull final String... events);

    /**
     * Handles single or multiple events and returns a reactive stream
     * @param events the event names to handle
     * @return A vertx reactive stream
     */
    default public Flowable<byte[]> flow(@Nonnull final String... events) {
        return on(events).bodyStream().toFlowable();
    }

    /**
     * Handles single or multiple events and returns a reactive stream
     * @param events the event names to handle
     * @return A vertx reactive stream
     */
    default public Observable<byte[]> observe(@Nonnull final String... events) {
        return on(events).bodyStream().toObservable();
    }

    public CompletableFuture<byte[]> publish(@Nonnull final String event, @Nonnull final byte[] data);
}